import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { useEffect, useState } from 'react'
import { Address, Cip30Handle, Cip30Wallet, Value, WalletHelper } from '@hyperionbt/helios';
import WalletInfo from '../../components/WalletInfo';
import LockAda from '../../components/LockAda';

declare global{
  interface Window {
    cardano :any;
  }
}
export default function Home() {

  const [walletAPI, setWalletAPI]= useState<undefined | any>(undefined);
  const [tx, setTx] = useState({txId : ''});
  const [walletInfo, setWalletInfo]= useState({balance: ''});
  const [walletIsEnabled, setWalletIsEnabled] = useState(false);
  const [whichWalletSelected, setWhichWalletSelected] = useState(undefined);
  const [threadToken, setThreadToken] = useState({tt : ''});

  useEffect(()=>{
    const checkWallet = async ()=>{
      setWalletIsEnabled( await checkIfWalletFound());
    }
    checkWallet();
  }, [whichWalletSelected]);

  useEffect(()=>{
    const enableSelectedWallet = async ()=>{
      if(walletIsEnabled){
        const api= await enableWallet();
        setWalletAPI(api);
      }
    }
    enableSelectedWallet();
  }, [walletIsEnabled])

  useEffect(()=>{
    const updateWalletInfo = async ()=>{
      if(walletIsEnabled){
        const _balance= await getBalance() as string;
        setWalletInfo({ balance : _balance});
      }
    }
    updateWalletInfo();
    console.log("update wallet info called");
  }, [walletAPI]);

  const handleWalletSelect = async(obj :any)=>{
    const whichWalletSelected= obj.target.value;
    setWhichWalletSelected(whichWalletSelected);
  }

  const checkIfWalletFound = async() =>{
    let walletFound= false;
    const walletChoice= whichWalletSelected;
    if(walletChoice === "nami"){
      walletFound = !!window?.cardano?.nami;
    }
    else if(walletChoice === "eternl"){
      walletFound = !!!window?.cardano?.eternl;
    }
    return walletFound;
  }
  const enableWallet = async() =>{
    try{
      const walletChoice= whichWalletSelected;
      if(walletChoice === "nami"){
        const handle: Cip30Handle = await window.cardano.nami.enable();
        const walletAPI = new Cip30Wallet(handle);
        return walletAPI;
      }
      else if(walletChoice === "eternl"){
        const handle: Cip30Handle = await window.cardano.eternl.enable();
        const walletAPI= new Cip30Wallet(handle);
        return walletAPI;
      }
    }
    catch(err){
      console.log("enable wallet error ",err);
    }
  }

  const getBalance = async()=>{
    try{
      const walletHelper = new WalletHelper(walletAPI);
      const balanceAmountValue = await walletHelper.calcBalance();
      console.log("balance amount value ",balanceAmountValue);
      const balanceAmount =   balanceAmountValue.lovelace;
      console.log("balance amount ",balanceAmount);
      const walletBalance : BigInt= BigInt(balanceAmount);
      console.log("bigInt ", walletBalance);
      return walletBalance.toLocaleString();
    }
    catch(err){
      console.log("get balance error ", err);
    }
  }
  const lockAda = async ( params : any)=>{
    //re- enable wallet api, account may have been changed 
    const api= enableWallet();
    setWalletAPI(api);
    
    const benAddr= params[0] as string;
    const adaQty= params[1] as string;
    const dueDate= params[2] as string;
    const deadline= new Date(dueDate+ "T00:00");

    const benPkh= Address.fromBech32(benAddr).pubKeyHash;
    const lovelaceAmount= Number(adaQty) * 1000000;
    const maxTxFee: number = 500000;
    const minChangeAmount: number = 1000000;
    const adaAmountValue= new Value(BigInt(lovelaceAmount));
    const minUTXOVal= new Value(BigInt(lovelaceAmount+ maxTxFee+ minChangeAmount));

    // Get wallet utxos
    const walletHelper= new WalletHelper(walletAPI);
    const utxos= await walletHelper.pickUtxos(minUTXOVal);

    //get change address
    const changeAddr= await walletHelper.changeAddress;

    //Determine the utxo used for collateral
    



  }

  const clickme = async ()=>{
    console.log("walletAPI= ",walletAPI);
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h3 className={styles.title}>
          Helios Tx Builder
        </h3>
        <div className={styles.borderwallet}>
          <p>Connect to your Wallet</p>
          
          <p className={styles.borderwallet}>
            <input type="radio" id='nami' name='wallet' value='nami' onChange={handleWalletSelect} />
            <label> Nami</label>
          </p>

          <p className={styles.borderwallet}>
            <input type="radio" id='eternl' name='wallet' value='nami' onChange={handleWalletSelect} />
            <label> Eternl</label>
          </p>
        </div>

        <div className={styles.borderwallet}>
          View Smart Contract: &nbsp; &nbsp;
          <a href="/api/vesting" target="_blank" rel="noopener noreferrer">vesting.hl</a>
        </div>
        <button onClick={clickme}>Click Me</button>

        {!tx.txId && walletIsEnabled && <div className={styles.border}><WalletInfo walletInfo={walletInfo}/></div> }
        {tx.txId && walletIsEnabled && <div className={styles.border}> 
        <b>Transaction Success !!!</b>
        <p>TxId &nbsp; &nbsp; <a href={"https://preprod.cexplorer.io/tx/" + tx.txId} target= "_blank" rel="noopener noreferer">{tx.txId}</a> </p>
        <p>Please wait until the Transaction is confirmed on the Blockchain and reload this page before doing another transaction</p>
        </div> }
        {threadToken.tt && <div className={styles.border}>
          <p>Please Copy and save your Vesting Key </p>
          <b><p>{threadToken.tt}</p></b>
          <p>You will need this key to unlock your funds</p>
        </div> }

        {walletIsEnabled && !tx.txId && <div className={styles.border}><LockAda onLockAda = {lockAda}/></div> }




      </main>
    </>
  )
}
